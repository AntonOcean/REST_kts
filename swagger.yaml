swagger: '2.0'
info:
  description: Test backend
  version: 0.0.1
  title: Test
  license:
    name: proprietary
basePath: /
tags:
  - name: auth
    description: Auth endpoints
  - name: topic
    description: Topic endpoints
  - name: comment
    description: Comment endpoints
schemes:
  - http
paths:
  /auth.login:
    post:
      tags:
        - auth
      summary: Login user
      operationId: auth.login
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: username
          description: username
          required: true
          type: string
          format: string
        - in: formData
          name: password
          description: password
          required: true
          type: string
          format: string
      responses:
        '200':
          description: Return user
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '401':
          description: Invalid username && password
  /auth.logout:
    post:
      tags:
        - auth
      summary: Logout
      operationId: auth.logout
      produces:
        - application/json
      responses:
        '200':
          description: Returns ok
        '401':
          description: Return if unauthorized
  /topic.create:
    post:
      tags:
        - topic
      summary: Create topic
      operationId: topic.create
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: title
          description: title
          required: true
          type: string
          format: string
        - in: formData
          name: body
          description: body
          required: true
          type: string
          format: string
      responses:
        '200':
          description: Return topic
          schema:
            $ref: '#/definitions/Topic'
        '400':
          description: Invalid input
  /topic.list:
    get:
      tags:
        - topic
      summary: Topic list
      operationId: topic.list
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: limit
          description: title
          required: false
          default: 100
          type: integer
          format: integer
        - in: formData
          name: offset
          description: offset
          required: false
          default: 0
          type: integer
          format: integer
      responses:
        '200':
          description: Return topics
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
  /topic.like:
    post:
      tags:
        - topic
      summary: Like topic
      operationId: topic.like
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: topic_id
          description: title
          required: true
          type: integer
          format: integer
      responses:
        '200':
          description: Return like
          schema:
            $ref: '#/definitions/TopicLike'
        '400':
          description: Invalid input
        '403':
          description: Can not remove like
  /comment.create:
    post:
      tags:
        - comment
      summary: Create comment
      operationId: comment.create
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: body
          description: title
          required: true
          type: string
          format: string
      responses:
        '200':
          description: Return comment
          schema:
            $ref: '#/definitions/Comment'
        '400':
          description: Invalid input
  /comment.list:
    get:
      tags:
        - comment
      summary: Comment list
      operationId: comment.list
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: topic_id
          description: topic id
          required: true
          type: string
          format: string
        - in: formData
          name: limit
          description: title
          required: false
          default: 100
          type: integer
          format: integer
        - in: formData
          name: offset
          description: title
          required: false
          default: 0
          type: integer
          format: integer
      responses:
        '200':
          description: Return comment
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        '400':
          description: Invalid input
          
definitions:
  User:
    type: object
    description: Model equal with django default user model django.contrib.auth.models.User
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      date_joined:
        type: string
  Topic:
    type: object
    description: topic
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      body:
        type: string
      number_of_comments:
        type: integer
      number_of_likes:
        type: integer
      creator_id:
        type: integer
      created:
        type: string
  Comment:
    type: object
    description: comment
    properties:
      id:
        type: integer
        format: int64
      body:
        type: string
      creator_id:
        type: integer
      created:
        type: string
  TopicLike:
    type: object
    properties:
      topic_id:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64